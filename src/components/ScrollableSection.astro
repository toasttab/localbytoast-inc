---
import { Image } from "astro:assets";
import overview1 from "../images/overview/screen1.svg";
import overview2 from "../images/overview/screen2.svg";
import overview3 from "../images/overview/screen3.svg";
import overview4 from "../images/overview/screen4.svg";
import overview5 from "../images/overview/screen5.svg";
---

<div class="w-full overflow-x-visible relative z-20 pb-10">
  <div
    id="scroll-container"
    class="flex overflow-x-scroll pb-10 hide-scroll-bar cursor-grab"
  >
    <div id="inner-container" class="flex flex-nowrap space-x-10">
      <Image
        src={overview1}
        class="w-[355.15px] rounded-lg"
        alt="Overview 1"
        draggable="false"
      />
      <Image
        src={overview2}
        class="w-[355.15px] rounded-lg"
        alt="Overview 2"
        draggable="false"
      />
      <Image
        src={overview3}
        class="w-[355.15px] rounded-lg"
        alt="Overview 3"
        draggable="false"
      />
      <Image
        src={overview4}
        class="w-[355.15px] rounded-lg"
        alt="Overview 4"
        draggable="false"
      />
      <Image
        src={overview5}
        class="w-[355.15px] rounded-lg"
        alt="Overview 5"
        draggable="false"
      />
    </div>
  </div>
</div>

<style>
  .hide-scroll-bar {
    -ms-overflow-style: none; /* Internet Explorer 10+ */
    scrollbar-width: none; /* Firefox */
  }
  .hide-scroll-bar::-webkit-scrollbar {
    display: none; /* Safari and Chrome */
  }

  #scroll-container {
    cursor: grab;
    transition: margin-left 0.3s ease;
  }

  #scroll-container:active {
    cursor: grabbing;
  }
</style>

<script>
  const container = document.getElementById("scroll-container");
  const innerContainer = document.getElementById("inner-container");
  let isDown = false;
  let startX: number;
  let scrollLeft: number;

  const updateMarginLeft = () => {
    const screenWidth = window.innerWidth;
    const marginLeft = Math.max(0, (screenWidth - 1024) / 3); // Adjust 1024 to the desired breakpoint
    if (innerContainer) {
      innerContainer.style.marginLeft = `${marginLeft}px`;
    }
  };

  // Initial margin update
  updateMarginLeft();

  // Update margin on window resize
  window.addEventListener("resize", updateMarginLeft);

  if (container) {
    container.addEventListener("mousedown", (e) => {
      isDown = true;
      container.classList.add("active");
      startX = e.pageX - container.offsetLeft;
      scrollLeft = container.scrollLeft;
    });

    container.addEventListener("mouseleave", () => {
      isDown = false;
      container.classList.remove("active");
    });

    container.addEventListener("mouseup", () => {
      isDown = false;
      container.classList.remove("active");
    });

    container.addEventListener("mousemove", (e) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - container.offsetLeft;
      const walk = (x - startX) * 2; // The multiplier can be adjusted for sensitivity
      container.scrollLeft = scrollLeft - walk;
    });
  }
</script>
